@using Ux.Mvc.Web.UI
@model Ux.Mvc.ViewModels.Examples
@{
    ViewBag.Title = "Configuration - UxFoundation";
}
@Html.Partial("_Nav")
<div class="container">
    <div class="page-header">
        <h1>Setup</h1>
    </div>

    



    <div class="section">
        <h3>Include styles and scripts in your layouts</h3>
        <p>You will need to add a reference to the UX style and script bundles within your own layouts.</p>
        <div class="callout callout-info">
            <b>Note</b> you do not need to add any style or script paths for Bootstrap, Select2, Font Awesome or any of the other Ux dependent projects. Ux handles this for you.
        </div>

        <div class="highlight">
            <pre class="prettyprint lang-html">
&lt;html>
&lt;head>
    &hellip;
    @@Styles.Render("~/css/ux")
    @@Styles.Render("~/your/css/bundle")
    &hellip;
&lt;/head>
&lt;body>
     
    // Your content here

    @@Scripts.Render("~/js/jquery")
    &lt;!-- Must be placed after jQuery scripts -->
    @@Scripts.Render("~/js/ux")
    @@Scripts.Render("~/your/js/bundle")
&lt;/body>
&lt;/html>
</pre>


        </div>
    </div>
    <div class="Section">

        <h3 id="datepickers">Bootstrap Datepicker update</h3>
        <p>As at the release of the UxFoundation, Bootstrap Datepicker had not been updated to support the recently released Bootstrap 3.0.0. </p>
        <div class="callout callout-info">
            If the date pickers are not displaying properly, manually update the <code>~/Scripts/bootstrap-datepicker.js</code> with the following correction.
        </div>
        <div class="highlight">
            <pre class="prettyprint lang-js">
// Change line 41 from this....
this.component = this.element.is('.date') ? this.element.find('.add-on, .btn') : false;

// to this...
this.component = this.element.is('.date') ? this.element.find('.add-on, .input-group-addon, .btn') : false;
</pre>
        </div>
    </div>
    
    <div class="section">
        <h3>How it works</h3>

        <p>Ux comes with a wide number of editor and display templates. Rather than copy these into your own MVC editor and display template folders, these have been placed in a separate location and made accessible through the addition of a View Engine.</p>
        <p>The advantage of this approach is that you can customise the templates without changing the Ux templates themselves. Simply override the template as you would any other template, by placing a razor file into the EditorTemplates or DisplayTemplates folder. Any customisations you make in your own templates will not be affected by any future UxFoundation updates.</p>
        <p>
            The following locations are added:
        </p>

        <ul>
            <li><code>~/Ux.Mvc/Views/{1}/{0}.cshtml</code></li>
            <li><code>~/Ux.Mvc/Views/Shared/{0}.cshtml</code></li>
            <li><code>~/Ux.Mvc/Views/Documentation/{0}.cshtml</code></li>
        </ul>

    </div>
